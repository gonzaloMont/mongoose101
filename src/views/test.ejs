<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Ikasleak API</title>
    <script>
        async function fetchIkasleak() {
            const response = await fetch('/api/ikasleak');
            const data = await response.json();
            document.getElementById('ikasleak').innerText = JSON.stringify(data, null, 2);
        }

        async function fetchTaldeak() {
            const response = await fetch('/api/taldeak');
            const data = await response.json();
            document.getElementById('taldeak').innerText = JSON.stringify(data, null, 2);
        }


        async function createIkasle() {
            const izena = document.getElementById('izena').value;
            const adina = document.getElementById('adina').value;
            const email = document.getElementById('email').value;

            const response = await fetch('/api/ikasleak', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ izena, adina, email })
            });

            const data = await response.json();
            document.getElementById('newIkasle').innerText = JSON.stringify(data, null, 2);

            // comboboxa bete
            const selectEdit = document.getElementById('editIkasleSelect');
            const selectAssign = document.getElementById('assignIkasleSelect');

            const optionEdit = document.createElement('option');
            optionEdit.text = email;
            optionEdit.innerText = `${email}`;
            optionEdit.value = data._id;
            selectEdit.appendChild(optionEdit);

            const optionAssign = document.createElement('option');
            optionAssign.text = email;
            optionAssign.innerText = `${email}`;
            optionAssign.value = data._id;
            selectAssign.appendChild(optionAssign);

        }


        async function deleteIkasle() {

            const id = document.getElementById("deleteId").value;

            const select = document.getElementById('editIkasleSelect');
            const option = select.querySelector(`option[value="${id}"]`);
            select.removeChild(option);

            const selectAssign = document.getElementById('assignIkasleSelect');
            const optionAssign = selectAssign.querySelector(`option[value="${id}"]`);
            selectAssign.removeChild(optionAssign);


            const response = await fetch(`/api/ikasleak/${id}`, {
                method: "DELETE",
            });

            const data = await response.json();
            document.getElementById("deletedIkasle").innerText = JSON.stringify(data, null, 2);


        }



        async function comboboxEditBete() {
            const response = await fetch('/api/ikasleak');
            const data = await response.json();
            const select = document.getElementById('editIkasleSelect');
            data.forEach(ikasle => {
                const option = document.createElement('option');
                option.text = ikasle.email;
                option.innerText = `${ikasle.email}`;
                option.value = ikasle._id;
                select.appendChild(option);
            });
        }

        comboboxEditBete();



        async function comboboxAssignBete() {
            const response = await fetch('/api/ikasleak');
            const data = await response.json();
            const select = document.getElementById('assignIkasleSelect');
            data.forEach(ikasle => {
                const option = document.createElement('option');
                option.text = ikasle.email;
                option.innerText = `${ikasle.email}`;
                option.value = ikasle._id;
                select.appendChild(option);
            });


            const responseTalde = await fetch('/api/taldeak');
            const dataTalde = await responseTalde.json();
            const selectTalde = document.getElementById('editTaldeSelect');
            dataTalde.forEach(talde => {
                const option = document.createElement('option');
                option.text = talde.izena;
                option.innerText = `${talde.izena}`;
                option.value = talde._id;
                selectTalde.appendChild(option);
            });
        }

        comboboxAssignBete();


        async function editIkasle() {
            const id = document.getElementById('editIkasleSelect').value;
            const izena = document.getElementById('editIzena').value;
            const adina = document.getElementById('editAdina').value;
            const email = document.getElementById('editEmail').value;



            try {
                const response = await fetch(`/api/ikasleak/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ izena, adina, email })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                document.getElementById("editIkasle").innerText = JSON.stringify(data, null, 2);
            } catch (error) {
                console.error('Error during fetch or processing:', error);
            }


            const select = document.getElementById('editIkasleSelect');
            const option = select.querySelector(`option[value="${id}"]`);
            option.text = email;
            option.innerText = `${email}`;

        }




        async function createTalde() {
            const izena = document.getElementById('taldeIzena').value;

            const response = await fetch('/api/taldeak', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ izena })
            });

            const data = await response.json();
            document.getElementById('newTalde').innerText = JSON.stringify(data, null, 2);

            const selectTalde = document.getElementById('editTaldeSelect');
            const optionTalde = document.createElement('option');
            optionTalde.text = izena;
            optionTalde.innerText = `${izena}`;
            optionTalde.value = data._id;
            selectTalde.appendChild(optionTalde);
        }


        async function assignIkasleToTalde() {
            const taldeId = document.getElementById('editTaldeSelect').value;
            const ikasleId = document.getElementById('assignIkasleSelect').value;

            try {
                const response = await fetch('/api/taldeak/assign', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ taldeId, ikasleId })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();
                const editTaldeElement = document.getElementById('editTalde');
                editTaldeElement.innerHTML = ''; 
                editTaldeElement.innerText = JSON.stringify(data, null, 2);

            } catch (error) {
                console.error('Error during fetch or processing:', error);
            }
        }

    </script>
</head>

<body>
    <h1>Test Ikasleak API</h1>
    <button onclick="fetchIkasleak()">Get Ikasleak</button>
    <pre id="ikasleak"></pre>

    <h2>Create Ikasle</h2>
    <form onsubmit="event.preventDefault(); createIkasle();">
        <label for="izena">Izena:</label>
        <input type="text" id="izena" name="izena" required>
        <br>
        <label for="adina">Adina:</label>
        <input type="number" id="adina" name="adina" required>
        <br>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required>
        <br>
        <button type="submit">Create</button>
    </form>
    <pre id="newIkasle"></pre>

    <h2>Delete Ikasle</h2>
    <form onsubmit="event.preventDefault(); deleteIkasle();">
        <label for="ID">Ikasle ID:</label>
        <input type="text" id="deleteId" name="deleteId" required>
        <br>
        <button type="submit">Delete</button>
    </form>
    <pre id="deletedIkasle"></pre>


    <h2>Edit Ikasle</h2>
    <form onsubmit="event.preventDefault(); editIkasle();">
        <label for="editIkasleSelect">Ikasle email:</label>
        <select id="editIkasleSelect" name="editIkasleSelect" required>
            <option value="" disabled selected>Choose an ikasle</option>
        </select>
        <br>
        <label for="editIzena">Izena:</label>
        <input type="text" id="editIzena" name="editIzena" required>
        <br>
        <label for="editAdina">Adina:</label>
        <input type="number" id="editAdina" name="editAdina" required>
        <br>
        <label for="editEmail">Email:</label>
        <input type="email" id="editEmail" name="editEmail" required>
        <br>
        <button type="submit">Edit</button>
    </form>
    <pre id="editIkasle"></pre>


    <h2>Create Talde</h2>
    <form onsubmit="event.preventDefault(); createTalde();">
        <label for="izena">Talde Izena:</label>
        <input type="text" id="taldeIzena" name="izena" required>
        <br>
        <button type="submit">Create</button>
    </form>
    <pre id="newTalde"></pre>



    <h2>Assign Ikasle To Talde</h2>
    <form onsubmit="event.preventDefault(); assignIkasleToTalde();">

        <label for="editTaldeSelect">Talde:</label>
        <select id="editTaldeSelect" name="editTaldeSelect" required>
            <option value="" disabled selected>Choose a talde</option>
        </select>
        <br>
        <label for="assignIkasleSelect">Ikasle:</label>
        <select id="assignIkasleSelect" name="assignIkasleSelect" required>
            <option value="" disabled selected>Choose an ikasle</option>
        </select>

        <br>
        <button type="submit">Assign</button>
    </form>
    <pre id="editTalde"></pre>

    <h2>Get Taldeak</h2>
    <button onclick="fetchTaldeak()">Get Taldeak</button>
    <pre id="taldeak"></pre>


</body>

</html>